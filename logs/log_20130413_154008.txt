---PROGRAM START---
-----------------
Main menu
[C]lear tree (delete index file)
[D]ump index to console
[G]enerate random index BPT
[H]eight of tree
[I]nsert
I[M]port index
[Q]uery
[R]ead database table from file
[E]xit
-----------------
No tree available, creating new tree.
Block size:
Key to insert:
Inserting 40,40 into LeafNode 1
This block has no keys, inserting at the beginning.
----- LeafNode 1 -----
Keys:
[ 40 0 0 ]
Pointers:
[ 40 0 0 ]
Done.
-----------------
Main menu
[C]lear tree (delete index file)
[D]ump index to console
[G]enerate random index BPT
[H]eight of tree
[I]nsert
I[M]port index
[Q]uery
[R]ead database table from file
[E]xit
-----------------
Key to insert:
Inserting 50,50 into LeafNode 1
Key is larger than any other key, appending.
----- LeafNode 1 -----
Keys:
[ 40 50 0 ]
Pointers:
[ 40 50 0 ]
Done.
-----------------
Main menu
[C]lear tree (delete index file)
[D]ump index to console
[G]enerate random index BPT
[H]eight of tree
[I]nsert
I[M]port index
[Q]uery
[R]ead database table from file
[E]xit
-----------------
Key to insert:
Inserting 90,90 into LeafNode 1
Key is larger than any other key, appending.
----- LeafNode 1 -----
Keys:
[ 40 50 90 ]
Pointers:
[ 40 50 90 ]
Done.
-----------------
Main menu
[C]lear tree (delete index file)
[D]ump index to console
[G]enerate random index BPT
[H]eight of tree
[I]nsert
I[M]port index
[Q]uery
[R]ead database table from file
[E]xit
-----------------
Key to insert:
Inserting 20,20 into LeafNode 1
Found key larger than inserted value
----- LeafNode 1 -----
Keys:
[ 20 40 50 ]
Pointers:
[ 20 40 50 ]
This LeafNode is full. Splitting.
Created new LeafNode with ID 2
Moving <50,50> from 1 to 2.
Inserting 50,50 into LeafNode 2
This block has no keys, inserting at the beginning.
----- LeafNode 2 -----
Keys:
[ 50 0 0 ]
Pointers:
[ 50 0 0 ]
Moving <90,90> from 1 to 2.
Inserting 90,90 into LeafNode 2
Key is larger than any other key, appending.
----- LeafNode 2 -----
Keys:
[ 50 90 0 ]
Pointers:
[ 50 90 0 ]
Split LeftNode 1 was previously root, creating new root InternalNode w/ ID 3
Setting smallest pointer: 1 in InternalNode 3
Inserting 50,2 into InternalNode 3
Key set are empty. Inserting at the beginning.
----- LeafNode 1 -----
Keys:
[ 20 40 0 ]
Pointers:
[ 20 40 0 2 ]
Done.
-----------------
Main menu
[C]lear tree (delete index file)
[D]ump index to console
[G]enerate random index BPT
[H]eight of tree
[I]nsert
I[M]port index
[Q]uery
[R]ead database table from file
[E]xit
-----------------
Key to insert:
Searching for key in 3
100 is greater than greatest key 50
Set parent 3 for LeafNode 2
Inserting 100,100 into LeafNode 2
Key is larger than any other key, appending.
----- LeafNode 2 -----
Keys:
[ 50 90 100 ]
Pointers:
[ 50 90 100 ]
Done.
-----------------
Main menu
[C]lear tree (delete index file)
[D]ump index to console
[G]enerate random index BPT
[H]eight of tree
[I]nsert
I[M]port index
[Q]uery
[R]ead database table from file
[E]xit
-----------------
Key to insert:
Searching for key in 3
10 is smaller than smallest key 50
Set parent 3 for LeafNode 1
Inserting 10,10 into LeafNode 1
Found key larger than inserted value
----- LeafNode 1 -----
Keys:
[ 10 20 40 ]
Pointers:
[ 10 20 40 2 ]
----- LeafNode 1 -----
Keys:
[ 10 20 40 ]
Pointers:
[ 10 20 40 2 ]
Done.
-----------------
Main menu
[C]lear tree (delete index file)
[D]ump index to console
[G]enerate random index BPT
[H]eight of tree
[I]nsert
I[M]port index
[Q]uery
[R]ead database table from file
[E]xit
-----------------
Dumping index file to console.. 

----- LeafNode 1 -----
Keys:
[ 10 20 40 ]
Pointers:
[ 10 20 40 2 ]
----- LeafNode 2 -----
Keys:
[ 50 90 100 ]
Pointers:
[ 50 90 100 ]
----- InternalNode 3 -----
Keys:
[ 50 0 0 ]
Pointers:
[ 1 2 0 0 ]
-----------------
Main menu
[C]lear tree (delete index file)
[D]ump index to console
[G]enerate random index BPT
[H]eight of tree
[I]nsert
I[M]port index
[Q]uery
[R]ead database table from file
[E]xit
-----------------
Key to insert:
Searching for key in 3
2000 is greater than greatest key 50
Set parent 3 for LeafNode 2
Inserting 2000,2000 into LeafNode 2
Key is larger than any other key, appending.
This LeafNode is full. Splitting.
Created new LeafNode with ID 4
Moving <100,100> from 2 to 4.
Inserting 100,100 into LeafNode 4
This block has no keys, inserting at the beginning.
----- LeafNode 4 -----
Keys:
[ 100 0 0 ]
Pointers:
[ 100 0 0 ]
Moving <2000,2000> from 2 to 4.
Inserting 2000,2000 into LeafNode 4
Key is larger than any other key, appending.
----- LeafNode 4 -----
Keys:
[ 100 2000 0 ]
Pointers:
[ 100 2000 0 ]
Pushing up right node ID 4 to parent ID 3
Inserting 100,4 into InternalNode 3
Key is larger than any other key, appending.
----- InternalNode 3 -----
Keys:
[ 50 100 0 ]
Pointers:
[ 1 2 4 0 ]
----- LeafNode 2 -----
Keys:
[ 50 90 0 ]
Pointers:
[ 50 90 0 4 ]
Done.
-----------------
Main menu
[C]lear tree (delete index file)
[D]ump index to console
[G]enerate random index BPT
[H]eight of tree
[I]nsert
I[M]port index
[Q]uery
[R]ead database table from file
[E]xit
-----------------
Dumping index file to console.. 

----- LeafNode 1 -----
Keys:
[ 10 20 40 ]
Pointers:
[ 10 20 40 2 ]
----- LeafNode 2 -----
Keys:
[ 50 90 0 ]
Pointers:
[ 50 90 0 4 ]
----- InternalNode 3 -----
Keys:
[ 50 100 0 ]
Pointers:
[ 1 2 4 0 ]
----- LeafNode 4 -----
Keys:
[ 100 2000 0 ]
Pointers:
[ 100 2000 0 ]
-----------------
Main menu
[C]lear tree (delete index file)
[D]ump index to console
[G]enerate random index BPT
[H]eight of tree
[I]nsert
I[M]port index
[Q]uery
[R]ead database table from file
[E]xit
-----------------
Searching for key in 3
Set parent 3 for LeafNode 2
Tree height: 2
-----------------
Main menu
[C]lear tree (delete index file)
[D]ump index to console
[G]enerate random index BPT
[H]eight of tree
[I]nsert
I[M]port index
[Q]uery
[R]ead database table from file
[E]xit
-----------------
Deleted index file: true
-----------------
Main menu
[C]lear tree (delete index file)
[D]ump index to console
[G]enerate random index BPT
[H]eight of tree
[I]nsert
I[M]port index
[Q]uery
[R]ead database table from file
[E]xit
-----------------
---PROGRAM EXIT---
